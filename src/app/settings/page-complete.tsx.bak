"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { Account, Transaction, Category } from "@/types/finance";
import type {
  IncomeSource,
  RecurringExpense,
  Frequency,
} from "@/types/financial-config";
import Header from "@/ui/foundation/Header";

type SettingsView =
  | "configure-income"
  | "configure-expenses"
  | "data-accounts"
  | "data-transactions"
  | "data-categories"
  | "data-logs"
  | "general";

export default function SettingsPage() {
  // View state
  const [activeView, setActiveView] =
    useState<SettingsView>("configure-income");
  const [loading, setLoading] = useState(true);

  // Old system data (financial-data.json)
  const [accounts, setAccounts] = useState<Account[]>([]);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [lastUpdated, setLastUpdated] = useState<string>("");

  // New configuration system data (financial-config.json)
  const [incomeSources, setIncomeSources] = useState<IncomeSource[]>([]);
  const [recurringExpenses, setRecurringExpenses] = useState<
    RecurringExpense[]
  >([]);
  const [showIncomeForm, setShowIncomeForm] = useState(false);
  const [showExpenseForm, setShowExpenseForm] = useState(false);
  const [editingIncome, setEditingIncome] = useState<IncomeSource | null>(null);
  const [editingExpense, setEditingExpense] = useState<RecurringExpense | null>(
    null
  );

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const [accountsRes, transactionsRes, categoriesRes] = await Promise.all([
        fetch("/api/settings/accounts"),
        fetch("/api/settings/transactions"),
        fetch("/api/settings/categories"),
      ]);

      const [accountsData, transactionsData, categoriesData] =
        await Promise.all([
          accountsRes.json(),
          transactionsRes.json(),
          categoriesRes.json(),
        ]);

      setAccounts(accountsData);
      setTransactions(transactionsData);
      setCategories(categoriesData);
      setLastUpdated(accountsData.lastUpdated || new Date().toISOString());
    } catch (error) {
      console.error("Error loading data:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleExport = async () => {
    try {
      const response = await fetch("/api/settings/export");
      const data = await response.json();

      const blob = new Blob([JSON.stringify(data, null, 2)], {
        type: "application/json",
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `micro-finance-settings-${
        new Date().toISOString().split("T")[0]
      }.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Export error:", error);
    }
  };

  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      const text = await file.text();
      const data = JSON.parse(text);

      const response = await fetch("/api/settings/import", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (response.ok) {
        loadData(); // Refresh data
        alert("Settings imported successfully!");
      } else {
        alert("Import failed!");
      }
    } catch (error) {
      console.error("Import error:", error);
      alert("Invalid JSON file!");
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-base-200 p-6">
        <div className="max-w-6xl mx-auto">
          <Header level={1}>Settings</Header>
          <div className="animate-pulse space-y-4">
            <div className="h-12 bg-base-300 rounded"></div>
            <div className="h-64 bg-base-300 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      <div className="sticky top-0 z-10 bg-base-200">
        <header className="shadow-sm">
          <div className="max-w-7xl mx-auto px-4 py-6">
            <div className="flex justify-between items-center">
              <div>
                <h1 className="text-3xl font-bold text-primary">
                  Micro Finance
                </h1>
                <p className="text-base-content">
                  Beheer je financiÃ«n eenvoudig
                </p>
              </div>
            </div>
          </div>
        </header>

        <Navigation
          activeTab="settings"
          onTabChange={(tabId) => {
            if (tabId === "settings") {
              // Already on settings page
              return;
            }
            if (tabId === "upload") {
              window.location.href = "/upload";
            } else {
              // Navigate to main page with the selected tab
              window.location.href = `/?tab=${tabId}`;
            }
          }}
        />
      </div>

      <div className="max-w-6xl mx-auto p-6 space-y-6">
        <div className="flex justify-between items-center">
          <Header level={1}>Settings</Header>
          <div className="flex gap-2">
            <button onClick={handleExport} className="btn btn-outline">
              Export Settings
            </button>
            <label className="btn btn-outline">
              Import Settings
              <input
                type="file"
                accept=".json"
                onChange={handleImport}
                className="hidden"
              />
            </label>
          </div>
        </div>

        <div className="tabs tabs-boxed">
          <a
            className={`tab ${activeTab === "accounts" ? "tab-active" : ""}`}
            onClick={() => setActiveTab("accounts")}
          >
            Accounts ({accounts.length})
          </a>
          <a
            className={`tab ${
              activeTab === "transactions" ? "tab-active" : ""
            }`}
            onClick={() => setActiveTab("transactions")}
          >
            Transactions ({transactions.length})
          </a>
          <a
            className={`tab ${activeTab === "categories" ? "tab-active" : ""}`}
            onClick={() => setActiveTab("categories")}
          >
            Categories ({categories.length})
          </a>
          <a
            className={`tab ${activeTab === "logs" ? "tab-active" : ""}`}
            onClick={() => setActiveTab("logs")}
          >
            Activity Log
          </a>
        </div>

        <Card>
          {activeTab === "accounts" && (
            <AccountsTab accounts={accounts} onUpdate={loadData} />
          )}
          {activeTab === "transactions" && (
            <TransactionsTab
              transactions={transactions}
              categories={categories}
              accounts={accounts}
              onUpdate={loadData}
            />
          )}
          {activeTab === "categories" && (
            <CategoriesTab categories={categories} onUpdate={loadData} />
          )}
          {activeTab === "logs" && <LogsTab lastUpdated={lastUpdated} />}
        </Card>
      </div>
    </div>
  );
}

// Placeholder components - we'll implement these next
function AccountsTab({
  accounts,
  onUpdate,
}: {
  accounts: Account[];
  onUpdate: () => void;
}) {
  const [editingAccount, setEditingAccount] = useState<Account | null>(null);
  const [isCreating, setIsCreating] = useState(false);

  const handleCreate = async (account: Omit<Account, "id">) => {
    try {
      const response = await fetch("/api/settings/accounts", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(account),
      });

      if (response.ok) {
        onUpdate();
        setIsCreating(false);
      }
    } catch (error) {
      console.error("Create account error:", error);
    }
  };

  const handleUpdate = async (account: Account) => {
    try {
      const response = await fetch(`/api/settings/accounts/${account.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(account),
      });

      if (response.ok) {
        onUpdate();
        setEditingAccount(null);
      }
    } catch (error) {
      console.error("Update account error:", error);
    }
  };

  const handleDelete = async (accountId: string) => {
    if (!confirm("Are you sure you want to delete this account?")) return;

    try {
      const response = await fetch(`/api/settings/accounts/${accountId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        onUpdate();
      }
    } catch (error) {
      console.error("Delete account error:", error);
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Accounts Management</h3>
        <button
          onClick={() => setIsCreating(true)}
          className="btn btn-primary btn-sm"
        >
          Add Account
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="table table-zebra w-full">
          <thead>
            <tr>
              <th>Name</th>
              <th>Type</th>
              <th>Description</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {accounts.map((account) => (
              <tr key={account.id}>
                <td>{account.name}</td>
                <td>
                  <span
                    className={`badge ${
                      account.type === "checking"
                        ? "badge-primary"
                        : "badge-secondary"
                    }`}
                  >
                    {account.type}
                  </span>
                </td>
                <td>{account.description}</td>
                <td>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setEditingAccount(account)}
                      className="btn btn-xs btn-outline"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(account.id)}
                      className="btn btn-xs btn-error"
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {(isCreating || editingAccount) && (
        <AccountForm
          account={editingAccount}
          onSave={isCreating ? handleCreate : handleUpdate}
          onCancel={() => {
            setIsCreating(false);
            setEditingAccount(null);
          }}
        />
      )}
    </div>
  );
}

function TransactionsTab({
  transactions,
  categories,
  accounts,
  onUpdate,
}: {
  transactions: Transaction[];
  categories: Category[];
  accounts: Account[];
  onUpdate: () => void;
}) {
  const [editingTransaction, setEditingTransaction] =
    useState<Transaction | null>(null);
  const [isCreating, setIsCreating] = useState(false);

  const handleCreate = async (transaction: Omit<Transaction, "id">) => {
    try {
      const response = await fetch("/api/settings/transactions", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(transaction),
      });

      if (response.ok) {
        onUpdate();
        setIsCreating(false);
      }
    } catch (error) {
      console.error("Create transaction error:", error);
    }
  };

  const handleUpdate = async (transaction: Transaction) => {
    try {
      const response = await fetch(
        `/api/settings/transactions/${transaction.id}`,
        {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(transaction),
        }
      );

      if (response.ok) {
        onUpdate();
        setEditingTransaction(null);
      }
    } catch (error) {
      console.error("Update transaction error:", error);
    }
  };

  const handleDelete = async (transactionId: string) => {
    if (!confirm("Are you sure you want to delete this transaction?")) return;

    try {
      const response = await fetch(
        `/api/settings/transactions/${transactionId}`,
        {
          method: "DELETE",
        }
      );

      if (response.ok) {
        onUpdate();
      }
    } catch (error) {
      console.error("Delete transaction error:", error);
    }
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("nl-NL", {
      style: "currency",
      currency: "EUR",
    }).format(amount);
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Transactions Management</h3>
        <button
          onClick={() => setIsCreating(true)}
          className="btn btn-primary btn-sm"
        >
          Add Transaction
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="table table-zebra w-full">
          <thead>
            <tr>
              <th>Date</th>
              <th>Description</th>
              <th>Amount</th>
              <th>Type</th>
              <th>Category</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {transactions.slice(0, 50).map((transaction) => (
              <tr key={transaction.id}>
                <td>{new Date(transaction.date).toLocaleDateString()}</td>
                <td className="max-w-xs truncate">{transaction.description}</td>
                <td
                  className={
                    transaction.type === "income"
                      ? "text-success"
                      : "text-error"
                  }
                >
                  {transaction.type === "income" ? "+" : ""}
                  {formatCurrency(transaction.amount)}
                </td>
                <td>
                  <span
                    className={`badge ${
                      transaction.type === "income"
                        ? "badge-success"
                        : "badge-error"
                    }`}
                  >
                    {transaction.type}
                  </span>
                </td>
                <td>{transaction.category}</td>
                <td>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setEditingTransaction(transaction)}
                      className="btn btn-xs btn-outline"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(transaction.id)}
                      className="btn btn-xs btn-error"
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        {transactions.length > 50 && (
          <p className="text-sm text-base-content/70 mt-2">
            Showing first 50 transactions. Use filters for more specific
            results.
          </p>
        )}
      </div>

      {(isCreating || editingTransaction) && (
        <TransactionForm
          transaction={editingTransaction}
          categories={categories}
          accounts={accounts}
          onSave={isCreating ? handleCreate : handleUpdate}
          onCancel={() => {
            setIsCreating(false);
            setEditingTransaction(null);
          }}
        />
      )}
    </div>
  );
}

function CategoriesTab({
  categories,
  onUpdate,
}: {
  categories: Category[];
  onUpdate: () => void;
}) {
  const [editingCategory, setEditingCategory] = useState<Category | null>(null);
  const [isCreating, setIsCreating] = useState(false);

  const handleCreate = async (category: Omit<Category, "id">) => {
    try {
      const response = await fetch("/api/settings/categories", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(category),
      });

      if (response.ok) {
        onUpdate();
        setIsCreating(false);
      }
    } catch (error) {
      console.error("Create category error:", error);
    }
  };

  const handleUpdate = async (category: Category) => {
    try {
      const response = await fetch(`/api/settings/categories/${category.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(category),
      });

      if (response.ok) {
        onUpdate();
        setEditingCategory(null);
      }
    } catch (error) {
      console.error("Update category error:", error);
    }
  };

  const handleDelete = async (categoryId: string) => {
    if (!confirm("Are you sure you want to delete this category?")) return;

    try {
      const response = await fetch(`/api/settings/categories/${categoryId}`, {
        method: "DELETE",
      });

      if (response.ok) {
        onUpdate();
      }
    } catch (error) {
      console.error("Delete category error:", error);
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Categories Management</h3>
        <button
          onClick={() => setIsCreating(true)}
          className="btn btn-primary btn-sm"
        >
          Add Category
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="table table-zebra w-full">
          <thead>
            <tr>
              <th>Name</th>
              <th>Type</th>
              <th>Color</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {categories.map((category) => (
              <tr key={category.id}>
                <td>{category.name}</td>
                <td>
                  <span
                    className={`badge ${
                      category.type === "income"
                        ? "badge-success"
                        : "badge-error"
                    }`}
                  >
                    {category.type}
                  </span>
                </td>
                <td>
                  <div className="flex items-center space-x-2">
                    <div
                      className="w-4 h-4 rounded"
                      style={{ backgroundColor: category.color }}
                    ></div>
                    <span className="font-mono text-xs">{category.color}</span>
                  </div>
                </td>
                <td>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setEditingCategory(category)}
                      className="btn btn-xs btn-outline"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(category.id)}
                      className="btn btn-xs btn-error"
                    >
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {(isCreating || editingCategory) && (
        <CategoryForm
          category={editingCategory}
          onSave={isCreating ? handleCreate : handleUpdate}
          onCancel={() => {
            setIsCreating(false);
            setEditingCategory(null);
          }}
        />
      )}
    </div>
  );
}

function LogsTab({ lastUpdated }: { lastUpdated: string }) {
  return (
    <div>
      <h3 className="text-lg font-semibold mb-4">Activity Log</h3>
      <div className="space-y-2">
        <div className="flex justify-between items-center p-3 bg-base-100 rounded">
          <span>Last Updated:</span>
          <span className="font-mono text-sm">
            {new Date(lastUpdated).toLocaleString()}
          </span>
        </div>
      </div>
    </div>
  );
}

// AccountForm component
function AccountForm({
  account,
  onSave,
  onCancel,
}: {
  account?: Account | null;
  onSave: (account: any) => void;
  onCancel: () => void;
}) {
  const [formData, setFormData] = useState({
    name: account?.name || "",
    type: account?.type || "checking",
    description: account?.description || "",
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (account) {
      onSave({ ...account, ...formData });
    } else {
      onSave({ ...formData, id: `account-${Date.now()}` });
    }
  };

  return (
    <div className="modal modal-open">
      <div className="modal-box">
        <h3 className="font-bold text-lg">
          {account ? "Edit Account" : "Create Account"}
        </h3>
        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div>
            <label className="label">
              <span className="label-text">Name</span>
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              className="input input-bordered w-full"
              required
            />
          </div>

          <div>
            <label className="label">
              <span className="label-text">Type</span>
            </label>
            <select
              value={formData.type}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  type: e.target.value as Account["type"],
                })
              }
              className="select select-bordered w-full"
            >
              <option value="checking">Checking</option>
              <option value="savings">Savings</option>
              <option value="crypto">Crypto</option>
              <option value="stocks">Stocks</option>
              <option value="debt">Debt</option>
              <option value="other">Other</option>
            </select>
          </div>

          <div>
            <label className="label">
              <span className="label-text">Description</span>
            </label>
            <textarea
              value={formData.description}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              className="textarea textarea-bordered w-full"
              rows={3}
            />
          </div>

          <div className="modal-action">
            <button type="button" onClick={onCancel} className="btn">
              Cancel
            </button>
            <button type="submit" className="btn btn-primary">
              {account ? "Update" : "Create"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// TransactionForm component
function TransactionForm({
  transaction,
  categories,
  accounts,
  onSave,
  onCancel,
}: {
  transaction?: Transaction | null;
  categories: Category[];
  accounts: Account[];
  onSave: (transaction: any) => void;
  onCancel: () => void;
}) {
  const [formData, setFormData] = useState({
    description: transaction?.description || "",
    amount: transaction?.amount || 0,
    type: transaction?.type || "expense",
    category: transaction?.category || "",
    accountId: transaction?.accountId || "",
    date: transaction?.date || new Date().toISOString().split("T")[0],
    isRecurring: transaction?.isRecurring || false,
    recurringType: transaction?.recurringType || "monthly",
    tags: transaction?.tags?.join(", ") || "",
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const transactionData = {
      ...formData,
      amount: parseFloat(formData.amount.toString()),
      tags: formData.tags
        ? formData.tags
            .split(",")
            .map((tag) => tag.trim())
            .filter((tag) => tag)
        : [],
    };

    if (transaction) {
      onSave({ ...transaction, ...transactionData });
    } else {
      onSave({ ...transactionData, id: `tx-manual-${Date.now()}` });
    }
  };

  return (
    <div className="modal modal-open">
      <div className="modal-box max-w-2xl">
        <h3 className="font-bold text-lg">
          {transaction ? "Edit Transaction" : "Create Transaction"}
        </h3>
        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">
                <span className="label-text">Description</span>
              </label>
              <input
                type="text"
                value={formData.description}
                onChange={(e) =>
                  setFormData({ ...formData, description: e.target.value })
                }
                className="input input-bordered w-full"
                required
              />
            </div>

            <div>
              <label className="label">
                <span className="label-text">Amount (â¬)</span>
              </label>
              <input
                type="number"
                step="0.01"
                value={formData.amount}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    amount: parseFloat(e.target.value) || 0,
                  })
                }
                className="input input-bordered w-full"
                required
              />
            </div>
          </div>

          <div className="grid grid-cols-3 gap-4">
            <div>
              <label className="label">
                <span className="label-text">Type</span>
              </label>
              <select
                value={formData.type}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    type: e.target.value as "income" | "expense",
                  })
                }
                className="select select-bordered w-full"
              >
                <option value="expense">Expense</option>
                <option value="income">Income</option>
              </select>
            </div>

            <div>
              <label className="label">
                <span className="label-text">Category</span>
              </label>
              <select
                value={formData.category}
                onChange={(e) =>
                  setFormData({ ...formData, category: e.target.value })
                }
                className="select select-bordered w-full"
                required
              >
                <option value="">Select Category</option>
                {categories.map((cat) => (
                  <option key={cat.id} value={cat.id}>
                    {cat.name}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="label">
                <span className="label-text">Account</span>
              </label>
              <select
                value={formData.accountId}
                onChange={(e) =>
                  setFormData({ ...formData, accountId: e.target.value })
                }
                className="select select-bordered w-full"
                required
              >
                <option value="">Select Account</option>
                {accounts.map((acc) => (
                  <option key={acc.id} value={acc.id}>
                    {acc.name}
                  </option>
                ))}
              </select>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="label">
                <span className="label-text">Date</span>
              </label>
              <input
                type="date"
                value={formData.date}
                onChange={(e) =>
                  setFormData({ ...formData, date: e.target.value })
                }
                className="input input-bordered w-full"
                required
              />
            </div>

            <div>
              <label className="label">
                <span className="label-text">Recurring</span>
              </label>
              <div className="flex items-center space-x-2">
                <input
                  type="checkbox"
                  checked={formData.isRecurring}
                  onChange={(e) =>
                    setFormData({ ...formData, isRecurring: e.target.checked })
                  }
                  className="checkbox"
                />
                <span className="label-text">Is Recurring</span>
              </div>
            </div>
          </div>

          {formData.isRecurring && (
            <div>
              <label className="label">
                <span className="label-text">Recurring Type</span>
              </label>
              <select
                value={formData.recurringType}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    recurringType: e.target.value as any,
                  })
                }
                className="select select-bordered w-full"
              >
                <option value="monthly">Monthly</option>
                <option value="yearly">Yearly</option>
                <option value="weekly">Weekly</option>
                <option value="daily">Daily</option>
              </select>
            </div>
          )}

          <div>
            <label className="label">
              <span className="label-text">Tags (comma separated)</span>
            </label>
            <input
              type="text"
              value={formData.tags}
              onChange={(e) =>
                setFormData({ ...formData, tags: e.target.value })
              }
              className="input input-bordered w-full"
              placeholder="tag1, tag2, tag3"
            />
          </div>

          <div className="modal-action">
            <button type="button" onClick={onCancel} className="btn">
              Cancel
            </button>
            <button type="submit" className="btn btn-primary">
              {transaction ? "Update" : "Create"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}

// CategoryForm component
function CategoryForm({
  category,
  onSave,
  onCancel,
}: {
  category?: Category | null;
  onSave: (category: any) => void;
  onCancel: () => void;
}) {
  const [formData, setFormData] = useState({
    name: category?.name || "",
    type: category?.type || "expense",
    color: category?.color || "#3B82F6",
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (category) {
      onSave({ ...category, ...formData });
    } else {
      onSave({ ...formData, id: `cat-${Date.now()}` });
    }
  };

  const presetColors = [
    "#EF4444",
    "#F97316",
    "#F59E0B",
    "#EAB308",
    "#84CC16",
    "#22C55E",
    "#10B981",
    "#14B8A6",
    "#06B6D4",
    "#0EA5E9",
    "#3B82F6",
    "#6366F1",
    "#8B5CF6",
    "#A855F7",
    "#D946EF",
    "#EC4899",
    "#F43F5E",
    "#6B7280",
    "#374151",
    "#111827",
  ];

  return (
    <div className="modal modal-open">
      <div className="modal-box">
        <h3 className="font-bold text-lg">
          {category ? "Edit Category" : "Create Category"}
        </h3>
        <form onSubmit={handleSubmit} className="space-y-4 mt-4">
          <div>
            <label className="label">
              <span className="label-text">Name</span>
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              className="input input-bordered w-full"
              required
            />
          </div>

          <div>
            <label className="label">
              <span className="label-text">Type</span>
            </label>
            <select
              value={formData.type}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  type: e.target.value as "income" | "expense",
                })
              }
              className="select select-bordered w-full"
            >
              <option value="expense">Expense</option>
              <option value="income">Income</option>
            </select>
          </div>

          <div>
            <label className="label">
              <span className="label-text">Color</span>
            </label>
            <div className="space-y-2">
              <input
                type="color"
                value={formData.color}
                onChange={(e) =>
                  setFormData({ ...formData, color: e.target.value })
                }
                className="w-full h-10 rounded border"
              />
              <div className="flex flex-wrap gap-2">
                {presetColors.map((color) => (
                  <button
                    key={color}
                    type="button"
                    onClick={() => setFormData({ ...formData, color })}
                    className="w-8 h-8 rounded border-2 border-base-300 hover:border-base-content"
                    style={{ backgroundColor: color }}
                  />
                ))}
              </div>
            </div>
          </div>

          <div className="modal-action">
            <button type="button" onClick={onCancel} className="btn">
              Cancel
            </button>
            <button type="submit" className="btn btn-primary">
              {category ? "Update" : "Create"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
